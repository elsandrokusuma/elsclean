// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI-powered shoe care recommendation tool.
 *
 * - shoeAdvisor - A function that handles the shoe care recommendation process.
 * - ShoeAdvisorInput - The input type for the shoeAdvisor function.
 * - ShoeAdvisorOutput - The return type for the shoeAdvisor function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ShoeAdvisorInputSchema = z.object({
  shoeType: z
    .string()
    .describe('The type of shoe (e.g., sneakers, boots, leather shoes).'),
  material: z
    .string()
    .describe('The material of the shoe (e.g., canvas, leather, suede).'),
  problem: z
    .string()
    .describe('A description of the problem with the shoe (e.g., dirty, scuffed, yellowing).'),
});
export type ShoeAdvisorInput = z.infer<typeof ShoeAdvisorInputSchema>;

const ShoeAdvisorOutputSchema = z.object({
  recommendation: z
    .string()
    .describe('The recommended cleaning service for the shoe.'),
  reasoning: z
    .string()
    .describe('The reasoning behind the recommendation.'),
});
export type ShoeAdvisorOutput = z.infer<typeof ShoeAdvisorOutputSchema>;

export async function shoeAdvisor(input: ShoeAdvisorInput): Promise<ShoeAdvisorOutput> {
  return shoeAdvisorFlow(input);
}

const prompt = ai.definePrompt({
  name: 'shoeAdvisorPrompt',
  input: {schema: ShoeAdvisorInputSchema},
  output: {schema: ShoeAdvisorOutputSchema},
  prompt: `You are an expert shoe care advisor. Based on the user's shoe type, material, and problem, you will recommend the best cleaning service.

  Shoe Type: {{{shoeType}}}
  Material: {{{material}}}
  Problem: {{{problem}}}
  
  Our services are:
  - Deep Cleaning: For heavy dirt and stains.
  - Fast Cleaning: For light dirt and a quick refresh.
  - Unyellowing: To restore yellowed soles.
  - Repaint: To change or restore color.

  Based on the problem, recommend one of our services and explain why.`,
});

const shoeAdvisorFlow = ai.defineFlow(
  {
    name: 'shoeAdvisorFlow',
    inputSchema: ShoeAdvisorInputSchema,
    outputSchema: ShoeAdvisorOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
